apply plugin: 'fabric-loom'
//apply plugin: 'io.github.juuxel.loom-quiltflower'
apply plugin: 'me.hypherionmc.cursegradle'
apply plugin: 'com.modrinth.minotaur'

archivesBaseName = "${modName.replaceAll("[^a-zA-Z]", "")}"
version = "v${modVersion}-${libs.versions.minecraft.get()}-Fabric"
group = modMavenGroup

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = "CurseForge"
                url = "https://cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven {
        name = "Modmuss"
        url = "https://maven.modmuss50.me/"
    }
    maven {
        name = 'Ladysnake'
        url = 'https://maven.ladysnake.org/releases'
    }
    maven {
        name = "JamiesWhiteShirt"
        url = "https://maven.jamieswhiteshirt.com/libs-release/"
    }
}

dependencies {
    // Common Project
    compileOnly(project(path: ":Common", configuration: "namedElements")) {
        transitive = false
    }

    // Minecraft
    minecraft "com.mojang:minecraft:${libs.versions.minecraft.get()}"
    mappings loom.layered() {
        parchment("org.parchmentmc.data:parchment-${libs.versions.parchment.minecraft.get()}:${libs.versions.parchment.version.get()}")
        officialMojangMappings {
            setNameSyntheticMembers(true)
        }
    }

    // Fabric Loader
    modApi libs.fabricloader.fabric
}

loom {
    mixin.defaultRefmapName = "${modId}.refmap.json"

    runs {
        configureEach {
            ideConfigGenerated(true)
            runDir("../run")
            vmArg '-Dmixin.debug.export=true'
        }
        client {
            client()
            setConfigName("Fabric Client-${libs.versions.minecraft.get()}")
        }
        server {
            server()
            setConfigName("Fabric Server-${libs.versions.minecraft.get()}")
        }
    }
}

processResources {
    from(project(":Common").sourceSets.main.resources)
    from(project(":Forge").file('src/generated/resources')) {
        exclude('.cache/')
    }
    // Forge's data gen doesn't work with assets placed in the common project, so we place them in Forge and include them here
    from(project(":Forge").sourceSets.main.resources) {
        include("assets/")
        include("data/")
    }

    duplicatesStrategy DuplicatesStrategy.INCLUDE

    // this will ensure that this task is redone when a value changes
    inputs.property "modId", modId
    inputs.property "modName", modName
    inputs.property "modVersion", modVersion
    inputs.property "modDescription", modDescription
    inputs.property "modGroup", project.group
    inputs.property "modPageUrl", modSourceUrl
    inputs.property "modIssueUrl", modIssueUrl
    inputs.property "modAuthor", modAuthor
    inputs.property "modLicense", modLicense
    inputs.property "minFabricVersion", libs.versions.fabricloader.min.get()
    inputs.property "minFabricApiVersion", libs.versions.fabricapi.min.get()
    inputs.property "minecraftVersion", libs.versions.minecraft.get()
    inputs.property "minPuzzlesVersion", libs.versions.puzzleslib.min.get()
    inputs.property "resourcePackFormat", libs.versions.resources.get()
    inputs.property "dataPackFormat", libs.versions.data.get()
    inputs.property "mainEntryPoint", "${project.group}.${archivesBaseName}Fabric"
    inputs.property "clientEntryPoint", "${project.group}.client.${archivesBaseName}FabricClient"
    inputs.property "modFabricEnvironment", modFabricEnvironment

    // replace stuff in fabric.mod.json
    filesMatching('fabric.mod.json') {
        expand(
                'modId': modId,
                'modName': modName,
                'modVersion': modVersion,
                'modDescription': modDescription,
                'modGroup': project.group,
                'modPageUrl': modSourceUrl,
                'modIssueUrl': modIssueUrl,
                'modAuthor': modAuthor,
                'modLicense': modLicense,
                'minFabricVersion': libs.versions.fabricloader.min.get(),
                'minFabricApiVersion': libs.versions.fabricapi.min.get(),
                'minecraftVersion': libs.versions.minecraft.get(),
                "minPuzzlesVersion": libs.versions.puzzleslib.min.get(),
                "mainEntryPoint": "${project.group}.${archivesBaseName}Fabric",
                "clientEntryPoint": "${project.group}.client.${archivesBaseName}FabricClient",
                "modFabricEnvironment": modFabricEnvironment
        )
    }

    // replace stuff in pack.mcmeta
    filesMatching('pack.mcmeta') {
        expand(
                'modDescription': modDescription,
                "resourcePackFormat": libs.versions.resources.get(),
                "dataPackFormat": libs.versions.data.get()
        )
    }
}

compileJava {
    source project(":Common").sourceSets.main.allSource
}

sourcesJar {
    from project(":Common").sourceSets.main.allJava
}

javadoc {
    source project(":Common").sourceSets.main.allJava
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "${modId}-fabric"
            version = modVersion
            from components.java
            pom {
                name = "${modName} [Fabric]"
                description = "${modDescription}"
                url = "${modSourceUrl}"
                scm {
                    url = "${modSourceUrl}"
                    connection = "${modSourceUrl}".replace("https", "scm:git:git").concat(".git")
                    developerConnection = "${modSourceUrl}".replace("https://github.com/", "scm:git:git@github.com:").concat(".git")
                }
                issueManagement {
                    system = 'github'
                    url = "${modIssueUrl}"
                }
                licenses {
                    license {
                        name = "${modLicense}"
                        url = "https://spdx.org/licenses/${modLicense}.html"
                    }
                }
                developers {
                    developer {
                        id = "${modAuthor}".toLowerCase()
                        name = "${modAuthor}"
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = 'FuzsModResources'
            url "file://" + project.hasProperty('modResources') ? "${project.findProperty('modResources')}/maven" : System.getenv('local_maven')
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

curseforge {
    if (!file('../CHANGELOG.md').canRead()) {
        throw new FileNotFoundException("Could not read changelog file")
    }
    apiKey = project.hasProperty('curseApiToken') ? project.findProperty('curseApiToken') : ''
    project {
        id = projectCurseForgeId
        changelogType = 'markdown'
        changelog = file('../CHANGELOG.md')
        releaseType = projectReleaseType
        addGameVersion 'Fabric'
        addGameVersion libs.versions.minecraft.get()
        mainArtifact(remapJar) {
            displayName = "[FABRIC] [${libs.versions.minecraft.get()}] ${archivesBaseName}-v${modVersion}"
            if (project.hasProperty("dependenciesRequiredFabricCurseForge") || project.hasProperty("dependenciesEmbeddedFabricCurseForge") || project.hasProperty("dependenciesOptionalFabricCurseForge")) {
                relations {
                    if (project.hasProperty("dependenciesRequiredFabricCurseForge")) {
                        (project.findProperty("dependenciesRequiredFabricCurseForge") as String).split(",").each {
                            requiredDependency it.trim()
                        }
                    }
                    if (project.hasProperty("dependenciesEmbeddedFabricCurseForge")) {
                        (project.findProperty("dependenciesEmbeddedFabricCurseForge") as String).split(",").each {
                            embeddedLibrary it.trim()
                        }
                    }
                    if (project.hasProperty("dependenciesOptionalFabricCurseForge")) {
                        (project.findProperty("dependenciesOptionalFabricCurseForge") as String).split(",").each {
                            optionalDependency it.trim()
                        }
                    }
                }
            }
        }
    }
    options {
//        debug = true
        javaVersionAutoDetect = false
        forgeGradleIntegration = false
    }
}

modrinth {
    if (!file('../CHANGELOG.md').canRead()) {
        throw new FileNotFoundException("Could not read changelog file")
    }
    token = project.hasProperty('modrinthApiToken') ? project.findProperty('modrinthApiToken') : ''
    projectId = projectModrinthId
    versionNumber = project.version
    versionName = "[FABRIC] [${libs.versions.minecraft.get()}] ${archivesBaseName}-v${modVersion}"
    changelog = file('../CHANGELOG.md').text
    versionType = projectReleaseType
    uploadFile = remapJar
    loaders.add 'fabric'
    gameVersions.add libs.versions.minecraft.get()
    if (project.hasProperty("dependenciesRequiredFabricModrinth") || project.hasProperty("dependenciesEmbeddedFabricModrinth") || project.hasProperty("dependenciesOptionalFabricModrinth")) {
        dependencies {
            if (project.hasProperty("dependenciesRequiredFabricModrinth")) {
                (project.findProperty("dependenciesRequiredFabricModrinth") as String).split(",").each {
                    required.project it.trim()
                }
            }
            if (project.hasProperty("dependenciesEmbeddedFabricModrinth")) {
                (project.findProperty("dependenciesEmbeddedFabricModrinth") as String).split(",").each {
                    embedded.project it.trim()
                }
            }
            if (project.hasProperty("dependenciesOptionalFabricModrinth")) {
                (project.findProperty("dependenciesOptionalFabricModrinth") as String).split(",").each {
                    optional.project it.trim()
                }
            }
        }
    }
//	debugMode = true
}

task copyJarToDir(type: Copy) {
    onlyIf { project.hasProperty('buildJarOutputDir') && project.hasProperty('uniqueBuildNumber') }
    if (project.findProperty('copyBuildJar').toBoolean()) {
        from remapJar
        into project.findProperty('buildJarOutputDir')
        // add build number to be able to distinguish jars when testing thorough official launcher
        // build number is stored in global gradle.properties
        rename { fileName -> fileName.replace("v${modVersion}", "v${modVersion}.${uniqueBuildNumber}") }
    }
}

build.finalizedBy project.tasks.copyJarToDir, rootProject.tasks.incrementBuildNumber

def versionCatalog = extensions.getByType(VersionCatalogsExtension).named("libs")

dependencies {
    // Fabric Api
    modApi libs.fabricapi.fabric

    // Forge Config Api Port
    modApi libs.forgeconfigapiport.fabric

    // Puzzles Access Api
    modApi(include(libs.puzzlesaccessapi.fabric.get()))

    // Cardinal Components
    modApi(libs.cardinalcomponentsbase.fabric.get())
    modApi(libs.cardinalcomponentsentity.fabric.get())
    modApi(libs.cardinalcomponentsblock.fabric.get())
    modApi(libs.cardinalcomponentschunk.fabric.get())
    modApi(libs.cardinalcomponentsworld.fabric.get())

    // Quality of Life Mods
    versionCatalog.findLibrary("modmenu.fabric").ifPresent {
        modLocalRuntime(it)
    }
    versionCatalog.findLibrary("forgeconfigscreens.fabric").ifPresent {
        modLocalRuntime(it)
    }
}

loom {
    accessWidenerPath = file("src/main/resources/${modId}.accesswidener")
}
