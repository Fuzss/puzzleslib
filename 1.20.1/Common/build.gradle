apply plugin: 'fabric-loom'
//apply plugin: 'io.github.juuxel.loom-quiltflower'

archivesBaseName = "${modName.replaceAll("[^a-zA-Z]", "")}"
version = "v${modVersion}-${libs.versions.minecraft.get()}-Common"
group = modMavenGroup

repositories {
    exclusiveContent {
        forRepository {
            maven {
                name = "CurseForge"
                url = "https://cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${libs.versions.minecraft.get()}"
    mappings loom.layered() {
        parchment("org.parchmentmc.data:parchment-${libs.versions.parchment.minecraft.get()}:${libs.versions.parchment.version.get()}")
        officialMojangMappings {
            setNameSyntheticMembers(true)
        }
    }
}

loom {
    mixin {
        // not sure if this is necessary for common...
        defaultRefmapName = "${modId}.refmap.json"
        // fix for java.lang.NoClassDefFoundError: org/objectweb/asm/tree/MethodNode
        useLegacyMixinAp = false
    }

    // this should hopeful prevent an empty run directory being generated in common during initial project setup
    runs {
        client {
            client()
            setConfigName("Common Client")
            ideConfigGenerated(false)
            runDir("../run")
        }
        server {
            server()
            setConfigName("Common Server")
            ideConfigGenerated(false)
            runDir("../run")
        }
    }
}

processResources {
    duplicatesStrategy DuplicatesStrategy.INCLUDE

    // this will ensure that this task is redone when a value changes
    inputs.property "modDescription", modDescription
    inputs.property "resourcePackFormat", libs.versions.resources.get()
    inputs.property "dataPackFormat", libs.versions.data.get()

    // replace stuff in pack.mcmeta
    filesMatching('pack.mcmeta') {
        expand(
                'modDescription': modDescription,
                "resourcePackFormat": libs.versions.resources.get(),
                "dataPackFormat": libs.versions.data.get()
        )
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = "${modId}-common"
            version = modVersion
            from components.java
            pom {
                name = "${modName} [Common]"
                description = "${modDescription}"
                url = "${modSourceUrl}"
                scm {
                    url = "${modSourceUrl}"
                    connection = "${modSourceUrl}".replace("https", "scm:git:git").concat(".git")
                    developerConnection = "${modSourceUrl}".replace("https://github.com/", "scm:git:git@github.com:").concat(".git")
                }
                issueManagement {
                    system = 'github'
                    url = "${modIssueUrl}"
                }
                licenses {
                    license {
                        name = "${modLicense}"
                        url = "https://spdx.org/licenses/${modLicense}.html"
                    }
                }
                developers {
                    developer {
                        id = "${modAuthor}".toLowerCase()
                        name = "${modAuthor}"
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = 'FuzsModResources'
            url "file://" + project.hasProperty('modResources') ? "${project.findProperty('modResources')}/maven" : System.getenv('local_maven')
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

task copyJarToDir(type: Copy) {
    onlyIf { project.hasProperty('buildJarOutputDir') && project.hasProperty('uniqueBuildNumber') }
    if (project.findProperty('copyBuildJar').toBoolean()) {
        from remapJar
        into project.findProperty('buildJarOutputDir')
        // add build number to be able to distinguish jars when testing thorough official launcher
        // build number is stored in global gradle.properties
        rename { fileName -> fileName.replace("v${modVersion}", "v${modVersion}.${uniqueBuildNumber}") }
    }
}

build.finalizedBy project.tasks.copyJarToDir, rootProject.tasks.incrementBuildNumber

dependencies {
    // Fabric Loader
    modApi libs.fabricloader.fabric

    // Fabric Api
    modApi fabricApi.module("fabric-api-base", "${libs.versions.fabricapi.version.get()}")
    modApi fabricApi.module("fabric-transitive-access-wideners-v1", "${libs.versions.fabricapi.version.get()}")

    // Forge Config Api Port
    modApi libs.forgeconfigapiport.common

    // Puzzles Access Api
    modApi libs.puzzlesaccessapi.common
}

loom {
    accessWidenerPath = project(":Fabric").file("src/main/resources/${modId}.accesswidener")
}

processResources {
    from(project(":Fabric").sourceSets.main.resources) {
        include("fabric.mod.json")
        include("${modId}.accesswidener")
    }

    // this will ensure that this task is redone when a value changes
    inputs.property "modId", modId
    inputs.property "modName", modName
    inputs.property "modVersion", modVersion
    inputs.property "modDescription", modDescription
    inputs.property "modGroup", project.group
    inputs.property "modPageUrl", modSourceUrl
    inputs.property "modIssueUrl", modIssueUrl
    inputs.property "modAuthor", modAuthor
    inputs.property "modLicense", modLicense
    inputs.property "minFabricVersion", libs.versions.fabricloader.min.get()
    inputs.property "minFabricApiVersion", libs.versions.fabricapi.min.get()
    inputs.property "minecraftVersion", libs.versions.minecraft.get()
    inputs.property "minPuzzlesVersion", libs.versions.puzzleslib.min.get()
    inputs.property "mainEntryPoint", "${project.group}.${archivesBaseName}Fabric"
    inputs.property "clientEntryPoint", "${project.group}.client.${archivesBaseName}FabricClient"
    inputs.property "modFabricEnvironment", modFabricEnvironment

    // replace stuff in fabric.mod.json
    filesMatching('fabric.mod.json') {
        expand(
                'modId': modId,
                'modName': modName,
                'modVersion': modVersion,
                'modDescription': modDescription,
                'modGroup': project.group,
                'modPageUrl': modSourceUrl,
                'modIssueUrl': modIssueUrl,
                'modAuthor': modAuthor,
                'modLicense': modLicense,
                'minFabricVersion': libs.versions.fabricloader.min.get(),
                'minFabricApiVersion': libs.versions.fabricapi.min.get(),
                'minecraftVersion': libs.versions.minecraft.get(),
                "minPuzzlesVersion": libs.versions.puzzleslib.min.get(),
                "mainEntryPoint": "${project.group}.${archivesBaseName}Fabric",
                "clientEntryPoint": "${project.group}.client.${archivesBaseName}FabricClient",
                "modFabricEnvironment": modFabricEnvironment
        )
    }
}
