plugins {
    id 'fabric-loom' version '0.12-SNAPSHOT'
    id 'io.github.juuxel.loom-quiltflower' version '1.7.1'
    // this depends on an older version of guava, which loom is incompatible with, so make sure to apply this plugin after loom
    // haven't found a proper way to manage plugin dependencies otherwise
    id 'me.hypherionmc.cursegradle' version '2.+'
    // cannot apply this in the base build.gradle as it'll be the same for all subprojects, only one configuration will work
    id 'com.modrinth.minotaur' version '2.+'
}

archivesBaseName = rootProject.name
version = "v${modVersion}-${minecraftVersion}-Fabric"
group = modMavenGroup

repositories {
    maven {
        name = "Modmuss"
        url = "https://maven.modmuss50.me/"
    }
    maven {
        name = 'Terraformers'
        url = "https://maven.terraformersmc.com/"
    }
    maven {
        name = "ladysnake"
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
    }
    maven {
        name = "jamieswhiteshirt"
        url = "https://maven.jamieswhiteshirt.com/libs-release/"
    }
}

dependencies {
    // Include Common Project
    compileOnly project(":Common")

    // Minecraft
    minecraft "com.mojang:minecraft:${minecraftVersion}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${minecraftVersion}:${parchmentMappingsVersion}@zip")
    }

    // Fabric
    modImplementation "net.fabricmc:fabric-loader:${fabricVersion}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabricApiVersion}"

    // Forge Configs
    modImplementation "net.minecraftforge:forgeconfigapiport-fabric:3.2.4"

    // Quality of Life Mods
    modRuntimeOnly "com.terraformersmc:modmenu:3.2.4"
    modRuntimeOnly "curse.maven:tooltipfix-411557:3543273"

    // Cardinal Components
    // those libraries are not set as a dependency for puzzles lib itself, any mod using them must do that separately in fabric.mods.json to avoid a crash on start-up due to a wrong mod loading order
    modImplementation(include("dev.onyxstudios.cardinal-components-api:cardinal-components-base:4.2.0"))
    modImplementation(include("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:4.2.0"))
	modImplementation(include("dev.onyxstudios.cardinal-components-api:cardinal-components-block:4.2.0"))
	modImplementation(include("dev.onyxstudios.cardinal-components-api:cardinal-components-chunk:4.2.0"))
	modImplementation(include("dev.onyxstudios.cardinal-components-api:cardinal-components-world:4.2.0"))

    // Puzzles Lib
//    modImplementation "fuzs.puzzleslib:puzzleslib-fabric:${puzzlesVersion}"
}

loom {
    mixin.defaultRefmapName = "${modId}.refmap.json"

    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("../run")
            vmArg '-Dmixin.debug.export=true'
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("../run")
            vmArg '-Dmixin.debug.export=true'
        }
    }
}

processResources {
    from project(":Common").sourceSets.main.resources
    // we need to have this in common so that in a non-production environment the common jar is correctly deobfuscated
    exclude("**/quilt.mod.json")

    duplicatesStrategy DuplicatesStrategy.INCLUDE

    // this will ensure that this task is redone when a value changes
    inputs.property "modId", 					"${modId}"
    inputs.property "modName", 					"${modName}"
    inputs.property "modVersion", 				"${modVersion}"
    inputs.property "modDescription", 			"${modDescription}"
    inputs.property "modGroup", 				project.group
    inputs.property "modPageUrl", 				"${modSourceUrl}"
    inputs.property "modIssueUrl", 				"${modIssueUrl}"
    inputs.property "modAuthor", 				"${modAuthor}"
    inputs.property "minFabricVersion", 		"${minFabricVersion}"
    inputs.property "minFabricApiVersion", 		"${minFabricApiVersion}"
    inputs.property "minMinecraftVersion", 		"${minMinecraftVersion}"
    inputs.property "nextMinecraftVersion", 	rootProject.getNextVersion("${minMinecraftVersion}")
	inputs.property "minPuzzlesVersion", 		"${minPuzzlesVersion}"
    inputs.property "packFormat", 				"${packFormat}"
	inputs.property "mainEntryPoint", 			"${project.group}.${rootProject.name}Fabric"
	inputs.property "clientEntryPoint", 		"${project.group}.client.${rootProject.name}FabricClient"
    inputs.property "modFabricEnvironment", 	"${modFabricEnvironment}"

    // replace stuff in fabric.mod.json and pack.mcmeta
    filesMatching ('fabric.mod.json') {
        expand (
                'modId':                	"${modId}",
                'modName':              	"${modName}",
                'modVersion':           	"${modVersion}",
                'modDescription':       	"${modDescription}",
                'modGroup':             	project.group,
                'modPageUrl':           	"${modSourceUrl}",
                'modIssueUrl':          	"${modIssueUrl}",
                'modAuthor':            	"${modAuthor}",
                'minFabricVersion':     	"${minFabricVersion}",
                'minFabricApiVersion':  	"${minFabricApiVersion}",
                'minMinecraftVersion':  	"${minMinecraftVersion}",
                "nextMinecraftVersion": 	rootProject.getNextVersion("${minMinecraftVersion}"),
				"minPuzzlesVersion":    	"${minPuzzlesVersion}",
				"mainEntryPoint": 			"${project.group}.${rootProject.name}Fabric",
				"clientEntryPoint": 		"${project.group}.client.${rootProject.name}FabricClient",
                "modFabricEnvironment":		"${modFabricEnvironment}"
        )
    }

    filesMatching ('pack.mcmeta') {
        expand (
                'modDescription':       "${modDescription}",
                "packFormat":           "${packFormat}"
        )
    }
}

compileJava {
    source project(":Common").sourceSets.main.allSource
}

sourcesJar {
    from project(":Common").sourceSets.main.allJava
}

javadoc {
    source project(":Common").sourceSets.main.allJava
}

publishing {
    publications {
        mavenJava (MavenPublication) {
            artifactId = "${modId}-fabric"
            version = modVersion
            from components.java
            pom {
                name = "${modName} [Fabric]"
                description = "${modDescription}"
                url = "${modSourceUrl}"
                scm {
                    url = "${modSourceUrl}"
                    connection = "${modSourceUrl}".replace("https", "scm:git:git").concat(".git")
                    developerConnection = "${modSourceUrl}".replace("https://github.com/", "scm:git:git@github.com:").concat(".git")
                }
                issueManagement {
                    system = 'github'
                    url = "${modIssueUrl}"
                }
                licenses {
                    license {
                        name = 'MPL-2'
                        url = 'https://www.mozilla.org/en-US/MPL/2.0/'
                    }
                }
                developers {
                    developer {
                        id = "${modAuthor}".toLowerCase()
                        name = "${modAuthor}"
                    }
                }
            }
            afterEvaluate {
                // exclude certain dependencies when publishing to maven
                // from https://stackoverflow.com/a/50121790
                pom.withXml {
                    asNode().dependencies.dependency.each { dep ->
                        // use this approach to make excluding dependencies from Curse Maven more convenient
                        if (["com.terraformersmc:modmenu"].stream().anyMatch(mod -> "${dep.groupId.last().value().last()}:${dep.artifactId.last().value().last()}".startsWith(mod))) {
                            assert dep.parent().remove(dep)
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = 'FuzsModResources'
            url "file://" + project.hasProperty('modResources') ? "${project.findProperty('modResources')}/maven" : System.getenv('local_maven')
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

curseforge {
    if (!file('../CHANGELOG.md').canRead()) { throw new FileNotFoundException("Could not read changelog file") }
    apiKey = project.hasProperty('curseApiToken') ? project.findProperty('curseApiToken') : ''
    project {
        id = projectCurseId
        changelogType = 'markdown'
        changelog = file('../CHANGELOG.md')
        releaseType = projectReleaseType
        addGameVersion 'Fabric'
        projectGameVersions.split(",").each {
            addGameVersion it.trim()
        }
        mainArtifact(remapJar) {
            displayName = "[FABRIC] [${minecraftVersion}] ${rootProject.name}-v${modVersion}"
            relations {
                requiredDependency 'fabric-api'
                requiredDependency 'forge-config-api-port-fabric'
//                requiredDependency 'puzzles-lib'
                embeddedLibrary 'cardinal-components'
            }
        }
        addArtifact sourcesJar
    }
    options {
//        debug = true
        javaVersionAutoDetect = false
        forgeGradleIntegration = false
    }
}

modrinth {
    if (!file('../CHANGELOG.md').canRead()) { throw new FileNotFoundException("Could not read changelog file") }
    token = project.hasProperty('modrinthApiToken') ? project.findProperty('modrinthApiToken') : ''
    projectId = projectModrinthId
    versionNumber = project.version
    versionName = "[FABRIC] [${minecraftVersion}] ${rootProject.name}-v${modVersion}"
    changelog = file('../CHANGELOG.md').text
    versionType = projectReleaseType
    uploadFile = remapJar // This is the java jar task
    projectGameVersions.split(",").each {
        gameVersions.add it.trim()
    }
    loaders.add 'fabric'
    additionalFiles.add file("${project.buildDir}/libs/${project.archivesBaseName}-${project.version}-sources.jar")
    dependencies {
        required.project 'fabric-api'
        required.project 'forge-config-api-port'
//        required.project 'puzzles-lib'
        embedded.project 'cardinal-components-api'
    }
//	debugMode = true
}

task copyJarToDir(type: Copy) {
    onlyIf { project.hasProperty('buildJarOutputDir') && project.hasProperty('uniqueBuildNumber') }
    if (project.findProperty('copyBuildJar').toBoolean()) {
        from remapJar
        into project.findProperty('buildJarOutputDir')
        // add build number to be able to distinguish jars when testing thorough official launcher
        // build number is stored in global gradle.properties
        rename { fileName -> fileName.replace("v${modVersion}", "v${modVersion}.${uniqueBuildNumber}") }
    }
}

build.finalizedBy project.tasks.copyJarToDir, rootProject.tasks.incrementBuildNumber
